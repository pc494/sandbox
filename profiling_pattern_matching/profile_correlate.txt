Timer unit: 1e-06 s

Total time: 0.000288 s
File: profile_correlate.py
Function: correlate at line 26

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    26                                           @profile
    27                                           def correlate(image, pattern,
    28                                                         include_direct_beam=False,
    29                                                         sim_threshold=1e-5,
    30                                                         interpolate=False,
    31                                                         **kwargs):
    32                                               """The correlation between a diffraction pattern and a simulation.
    33                                               Calculated using
    34                                                   .. math::
    35                                                       \frac{\sum_{j=1}^m P(x_j, y_j) T(x_j, y_j)}{\sqrt{\sum_{j=1}^m P^2(x_j, y_j)} \sqrt{\sum_{j=1}^m T^2(x_j, y_j)}}
    36                                               Parameters
    37                                               ----------
    38                                               image : :class:`np.ndarray`
    39                                                   A single electron diffraction signal. Should be appropriately scaled
    40                                                   and centered.
    41                                               pattern : :class:`DiffractionSimulation`
    42                                                   The pattern to compare to.
    43                                               sim_threshold : float
    44                                                   The threshold simulation intensity to consider for correlation
    45                                               interpolate : bool
    46                                                   If True, perform sub-pixel interpolation of the image.
    47                                               **kwargs
    48                                                   Arguments to pass to scipy.interpolate.RectBivariateSpline
    49                                               Returns
    50                                               -------
    51                                               float
    52                                                   The correlation coefficient.
    53                                               References
    54                                               ----------
    55                                               E. F. Rauch and L. Dupuy, “Rapid Diffraction Patterns identification through
    56                                                   template matching,” vol. 50, no. 1, pp. 87–99, 2005.
    57                                               """
    58         1            2      2.0      0.7      shape = image.shape
    59         1            6      6.0      2.1      half_shape = tuple(i // 2 for i in shape)
    60                                           
    61         1           85     85.0     29.5      pixel_coordinates = pattern.calibrated_coordinates.astype(int)[
    62         1           13     13.0      4.5          :, :2] + half_shape
    63         1            5      5.0      1.7      in_bounds = np.product((pixel_coordinates > 0) *
    64         1           22     22.0      7.6                             (pixel_coordinates < shape[0]), axis=1).astype(bool)
    65         1           24     24.0      8.3      pattern_intensities = pattern.intensities
    66         1            4      4.0      1.4      large_intensities = pattern_intensities > sim_threshold
    67         1            3      3.0      1.0      mask = np.logical_and(in_bounds, large_intensities)
    68                                           
    69         1            1      1.0      0.3      if interpolate:
    70                                                   x = np.arange(shape[0], dtype='float') - half_shape[0]
    71                                                   y = np.arange(shape[1], dtype='float') - half_shape[1]
    72                                                   for ar, i in zip([x, y], shape):
    73                                                       if not i % 2:
    74                                                           ar += 0.5
    75                                                   x = x * pattern.calibration[0]
    76                                                   y = y * pattern.calibration[1]
    77                                                   ip = RectBivariateSpline(x, y, image.T, **kwargs)
    78                                                   image_intensities = ip.ev(pattern.coordinates[:, 0][mask],
    79                                                                             pattern.coordinates[:, 1][mask])
    80                                               else:
    81         1           14     14.0      4.9          image_intensities = image.T[pixel_coordinates[:, 0][in_bounds], pixel_coordinates[:, 1][in_bounds]]
    82         1            2      2.0      0.7      pattern_intensities = pattern_intensities[mask]
    83         1          107    107.0     37.2      return np.nan_to_num(_correlate(image_intensities, pattern_intensities))

Total time: 2.8e-05 s
File: profile_correlate.py
Function: _correlate at line 115

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   115                                           @profile
   116                                           def _correlate(intensities_1, intensities_2):
   117         1            5      5.0     17.9      return np.dot(intensities_1, intensities_2) / (
   118         1           12     12.0     42.9          np.sqrt(np.dot(intensities_1, intensities_1)) *
   119         1           11     11.0     39.3          np.sqrt(np.dot(intensities_2, intensities_2))
   120                                           )

